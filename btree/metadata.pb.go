// Code generated by protoc-gen-go.
// source: metadata.proto
// DO NOT EDIT!

/*
Package btree is a generated protocol buffer package.

It is generated from these files:
	metadata.proto

It has these top-level messages:
	BtreeMetadata
	TreeNode
	TreeLog
*/
package btree

import proto "protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type BtreeMetadata struct {
	Root             *int64   `protobuf:"varint,1,opt,name=root" json:"root,omitempty"`
	Size             *int64   `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	LeafMax          *int64   `protobuf:"varint,4,opt,name=leaf_max" json:"leaf_max,omitempty"`
	NodeMax          *int64   `protobuf:"varint,5,opt,name=node_max" json:"node_max,omitempty"`
	IndexCursor      *int64   `protobuf:"varint,7,opt,name=index_cursor" json:"index_cursor,omitempty"`
	Index            *int64   `protobuf:"varint,8,opt,name=index" json:"index,omitempty"`
	Nodes            [][]byte `protobuf:"bytes,9,rep,name=nodes" json:"nodes,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *BtreeMetadata) Reset()         { *m = BtreeMetadata{} }
func (m *BtreeMetadata) String() string { return proto.CompactTextString(m) }
func (*BtreeMetadata) ProtoMessage()    {}

func (m *BtreeMetadata) GetRoot() int64 {
	if m != nil && m.Root != nil {
		return *m.Root
	}
	return 0
}

func (m *BtreeMetadata) GetSize() int64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

func (m *BtreeMetadata) GetLeafMax() int64 {
	if m != nil && m.LeafMax != nil {
		return *m.LeafMax
	}
	return 0
}

func (m *BtreeMetadata) GetNodeMax() int64 {
	if m != nil && m.NodeMax != nil {
		return *m.NodeMax
	}
	return 0
}

func (m *BtreeMetadata) GetIndexCursor() int64 {
	if m != nil && m.IndexCursor != nil {
		return *m.IndexCursor
	}
	return 0
}

func (m *BtreeMetadata) GetIndex() int64 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *BtreeMetadata) GetNodes() [][]byte {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type TreeNode struct {
	Id               *int64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Keys             [][]byte `protobuf:"bytes,2,rep,name=keys" json:"keys,omitempty"`
	Childrens        []int64  `protobuf:"varint,3,rep,name=childrens" json:"childrens,omitempty"`
	Values           [][]byte `protobuf:"bytes,4,rep,name=values" json:"values,omitempty"`
	NodeType         *int32   `protobuf:"varint,5,opt,name=node_type" json:"node_type,omitempty"`
	IsDirt           *int32   `protobuf:"varint,6,opt,name=is_dirt" json:"is_dirt,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *TreeNode) Reset()         { *m = TreeNode{} }
func (m *TreeNode) String() string { return proto.CompactTextString(m) }
func (*TreeNode) ProtoMessage()    {}

func (m *TreeNode) GetId() int64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TreeNode) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *TreeNode) GetChildrens() []int64 {
	if m != nil {
		return m.Childrens
	}
	return nil
}

func (m *TreeNode) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *TreeNode) GetNodeType() int32 {
	if m != nil && m.NodeType != nil {
		return *m.NodeType
	}
	return 0
}

func (m *TreeNode) GetIsDirt() int32 {
	if m != nil && m.IsDirt != nil {
		return *m.IsDirt
	}
	return 0
}

type TreeLog struct {
	Action           *string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Key              []byte  `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value            []byte  `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TreeLog) Reset()         { *m = TreeLog{} }
func (m *TreeLog) String() string { return proto.CompactTextString(m) }
func (*TreeLog) ProtoMessage()    {}

func (m *TreeLog) GetAction() string {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return ""
}

func (m *TreeLog) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *TreeLog) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
}
